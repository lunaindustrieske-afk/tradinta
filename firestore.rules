/**
 * @fileoverview Firestore Security Rules for the Tradinta platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for most data, ensuring that only the authenticated user (or authorized admins/ops) can create, read, update, or delete their own data. Top-level collections like `disputes`, `activityLogs`, and `systemAlerts` are secured for admin/ops use only. Public read access is granted to a limited number of collections like `homepageBanners` and `blogPosts`.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile data.  `userId` corresponds to the user's UID.
 * - `/manufacturers/{manufacturerId}`: Stores manufacturer profiles. `manufacturerId` corresponds to the user's UID.
 * - `/buyers/{buyerId}`: Stores buyer profiles. `buyerId` corresponds to the user's UID.
 * - `/manufacturers/{manufacturerId}/products/{productId}`: Stores products owned by a manufacturer.
 * - `/buyers/{buyerId}/orders/{orderId}`: Stores orders placed by a buyer.
 * - `/quotations/{quotationId}`: Stores quotations. Includes denormalized `buyerId` and `manufacturerId`.
 * - `/manufacturers/{manufacturerId}/marketingCampaigns/{marketingCampaignId}`: Stores marketing campaigns owned by a manufacturer.
 * - `/disputes/{disputeId}`: Stores disputes.
 * - `/activityLogs/{logId}`: Stores activity logs.
 * - `/homepageBanners/{bannerId}`: Stores homepage banners.
 * - `/blogPosts/{postId}`: Stores blog posts.
 * - `/sitePages/{pageId}`: Stores site pages.
 * - `/systemAlerts/{alertId}`: Stores system alerts.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Public read access is granted to `homepageBanners` and `blogPosts`.
 * - All write operations are protected by authentication checks and ownership validation.
 * - Data validation is limited to relational integrity (e.g., enforcing ownership constraints).
 *
 * Denormalization for Authorization:
 * The `quotations` collection denormalizes both `buyerId` and `manufacturerId` to enable easier querying and security rule creation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     *   request.auth.uid == "{userId}"
     * @allow (get) - Authenticated user reads their own profile.
     *   request.auth.uid == "{userId}"
     * @allow (update) - Authenticated user updates their own profile.
     *   request.auth.uid == "{userId}"
     * @allow (delete) - Authenticated user deletes their own profile.
     *   request.auth.uid == "{userId}"
     * @deny (create) - Unauthenticated user attempts to create a profile.
     *   request.auth == null
     * @deny (get) - User attempts to read another user's profile.
     *   request.auth.uid != "{userId}"
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.tradintaId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.tradintaId == resource.data.tradintaId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows creation and deletion of password reset tokens.
     * @path /passwordResetTokens/{tokenId}
     * @allow (create) - Allows creation of token.
     *   request.auth.uid != null
     * @allow (get) - Not applicable.
     * @allow (update) - Not applicable.
     * @allow (delete) - Allows deletion of a token.
     *   request.auth.uid != null
     * @deny (list) - Listing is not permitted.
     *   N/A
     * @principle Requires authentication for token creation.
     */
    match /passwordResetTokens/{tokenId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows manufacturers to manage their own profiles.
     * @path /manufacturers/{manufacturerId}
     * @allow (create) - Authenticated user creates their own manufacturer profile.
     *   request.auth.uid == "{manufacturerId}"
     * @allow (get) - Authenticated user reads their own manufacturer profile.
     *   request.auth.uid == "{manufacturerId}"
     * @allow (update) - Authenticated user updates their own manufacturer profile.
     *   request.auth.uid == "{manufacturerId}"
     * @allow (delete) - Authenticated user deletes their own manufacturer profile.
     *   request.auth.uid == "{manufacturerId}"
     * @deny (create) - Unauthenticated user attempts to create a manufacturer profile.
     *   request.auth == null
     * @deny (get) - User attempts to read another manufacturer's profile.
     *   request.auth.uid != "{manufacturerId}"
     * @principle Enforces document ownership for writes.
     */
    match /manufacturers/{manufacturerId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(manufacturerId) {
        return request.auth.uid == manufacturerId;
      }
      function isExistingOwner(manufacturerId) {
          return isOwner(manufacturerId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(manufacturerId);
      allow list: if false; // Manufacturer listing is not permitted.
      allow create: if isSignedIn() && isOwner(manufacturerId) && request.resource.data.id == manufacturerId;
      allow update: if isExistingOwner(manufacturerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(manufacturerId);
    }

    /**
     * @description Allows buyers to manage their own profiles.
     * @path /buyers/{buyerId}
     * @allow (create) - Authenticated user creates their own buyer profile.
     *   request.auth.uid == "{buyerId}"
     * @allow (get) - Authenticated user reads their own buyer profile.
     *   request.auth.uid == "{buyerId}"
     * @allow (update) - Authenticated user updates their own buyer profile.
     *   request.auth.uid == "{buyerId}"
     * @allow (delete) - Authenticated user deletes their own buyer profile.
     *   request.auth.uid == "{buyerId}"
     * @deny (create) - Unauthenticated user attempts to create a buyer profile.
     *   request.auth == null
     * @deny (get) - User attempts to read another buyer's profile.
     *   request.auth.uid != "{buyerId}"
     * @principle Enforces document ownership for writes.
     */
    match /buyers/{buyerId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(buyerId) {
        return request.auth.uid == buyerId;
      }
      function isExistingOwner(buyerId) {
          return isOwner(buyerId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(buyerId);
      allow list: if false; // Buyer listing is not permitted.
      allow create: if isSignedIn() && isOwner(buyerId) && request.resource.data.id == buyerId;
      allow update: if isExistingOwner(buyerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(buyerId);
    }

    /**
     * @description Allows manufacturers to manage their own products.
     * @path /manufacturers/{manufacturerId}/products/{productId}
     * @allow (create) - Authenticated manufacturer creates a new product.
     *   request.auth.uid == "{manufacturerId}"
     * @allow (get) - Authenticated manufacturer reads their own product.
     *   request.auth.uid == "{manufacturerId}"
     * @allow (update) - Authenticated manufacturer updates their own product.
     *   request.auth.uid == "{manufacturerId}"
     * @allow (delete) - Authenticated manufacturer deletes their own product.
     *   request.auth.uid == "{manufacturerId}"
     * @deny (create) - User attempts to create a product for another manufacturer.
     *   request.auth.uid != "{manufacturerId}"
     * @deny (get) - User attempts to read a product from another manufacturer.
     *   request.auth.uid != "{manufacturerId}"
     * @principle Enforces document ownership for writes.
     */
    match /manufacturers/{manufacturerId}/products/{productId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(manufacturerId) {
        return request.auth.uid == manufacturerId;
      }
      function isExistingOwner(manufacturerId) {
          return isOwner(manufacturerId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(manufacturerId);
      allow list: if isSignedIn() && isOwner(manufacturerId);
      allow create: if isSignedIn() && isOwner(manufacturerId) && request.resource.data.manufacturerId == manufacturerId;
      allow update: if isExistingOwner(manufacturerId) && request.resource.data.manufacturerId == resource.data.manufacturerId;
      allow delete: if isExistingOwner(manufacturerId);
    }

    /**
     * @description Allows buyers to manage their own orders.
     * @path /buyers/{buyerId}/orders/{orderId}
     * @allow (create) - Authenticated buyer creates a new order.
     *   request.auth.uid == "{buyerId}"
     * @allow (get) - Authenticated buyer reads their own order.
     *   request.auth.uid == "{buyerId}"
     * @allow (update) - Authenticated buyer updates their own order.
     *   request.auth.uid == "{buyerId}"
     * @allow (delete) - Authenticated buyer deletes their own order.
     *   request.auth.uid == "{buyerId}"
     * @deny (create) - User attempts to create an order for another buyer.
     *   request.auth.uid != "{buyerId}"
     * @deny (get) - User attempts to read an order from another buyer.
     *   request.auth.uid != "{buyerId}"
     * @principle Enforces document ownership for writes.
     */
    match /buyers/{buyerId}/orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(buyerId) {
        return request.auth.uid == buyerId;
      }
      function isExistingOwner(buyerId) {
          return isOwner(buyerId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(buyerId);
      allow list: if isSignedIn() && isOwner(buyerId);
      allow create: if isSignedIn() && isOwner(buyerId) && request.resource.data.buyerId == buyerId;
      allow update: if isExistingOwner(buyerId) && request.resource.data.buyerId == resource.data.buyerId;
      allow delete: if isExistingOwner(buyerId);
    }

    /**
     * @description Allows management of order items within an order.
     * @path /buyers/{buyerId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (create) - Authenticated buyer creates a new order item.
     *   request.auth.uid == "{buyerId}"
     * @allow (get) - Authenticated buyer reads their own order item.
     *   request.auth.uid == "{buyerId}"
     * @allow (update) - Authenticated buyer updates their own order item.
     *   request.auth.uid == "{buyerId}"
     * @allow (delete) - Authenticated buyer deletes their own order item.
     *   request.auth.uid == "{buyerId}"
     * @deny (create) - User attempts to create an order item for another buyer.
     *   request.auth.uid != "{buyerId}"
     * @deny (get) - User attempts to read an order item from another buyer.
     *   request.auth.uid != "{buyerId}"
     * @principle Enforces document ownership for writes.
     */
    match /buyers/{buyerId}/orders/{orderId}/orderItems/{orderItemId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(buyerId) {
        return request.auth.uid == buyerId;
      }

      allow get: if isSignedIn() && isOwner(buyerId);
      allow list: if isSignedIn() && isOwner(buyerId);
      allow create: if isSignedIn() && isOwner(buyerId);
      allow update: if isSignedIn() && isOwner(buyerId);
      allow delete: if isSignedIn() && isOwner(buyerId);
    }

    /**
     * @description Allows management of quotations. Requires authentication.
     * @path /quotations/{quotationId}
     * @allow (create) - Authenticated user creates a new quotation.
     *   request.auth.uid != null
     * @allow (get) - Authenticated user reads a quotation.
     *   request.auth.uid != null
     * @allow (update) - Authenticated user updates a quotation.
     *   request.auth.uid != null
     * @allow (delete) - Authenticated user deletes a quotation.
     *   request.auth.uid != null
     * @deny (list) - Listing quotations is not permitted.
     *   N/A
     * @principle Requires authentication for all operations.
     */
    match /quotations/{quotationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows manufacturers to manage their own marketing campaigns.
     * @path /manufacturers/{manufacturerId}/marketingCampaigns/{marketingCampaignId}
     * @allow (create) - Authenticated manufacturer creates a new marketing campaign.
     *   request.auth.uid == "{manufacturerId}"
     * @allow (get) - Authenticated manufacturer reads their own marketing campaign.
     *   request.auth.uid == "{manufacturerId}"
     * @allow (update) - Authenticated manufacturer updates their own marketing campaign.
     *   request.auth.uid == "{manufacturerId}"
     * @allow (delete) - Authenticated manufacturer deletes their own marketing campaign.
     *   request.auth.uid == "{manufacturerId}"
     * @deny (create) - User attempts to create a marketing campaign for another manufacturer.
     *   request.auth.uid != "{manufacturerId}"
     * @deny (get) - User attempts to read a marketing campaign from another manufacturer.
     *   request.auth.uid != "{manufacturerId}"
     * @principle Enforces document ownership for writes.
     */
    match /manufacturers/{manufacturerId}/marketingCampaigns/{marketingCampaignId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(manufacturerId) {
        return request.auth.uid == manufacturerId;
      }
      function isExistingOwner(manufacturerId) {
          return isOwner(manufacturerId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(manufacturerId);
      allow list: if isSignedIn() && isOwner(manufacturerId);
      allow create: if isSignedIn() && isOwner(manufacturerId) && request.resource.data.manufacturerId == manufacturerId;
      allow update: if isExistingOwner(manufacturerId) && request.resource.data.manufacturerId == resource.data.manufacturerId;
      allow delete: if isExistingOwner(manufacturerId);
    }

    /**
     * @description Allows management of disputes. Requires authentication.
     * @path /disputes/{disputeId}
     * @allow (create) - Authenticated user creates a new dispute.
     *   request.auth.uid != null
     * @allow (get) - Authenticated user reads a dispute.
     *   request.auth.uid != null
     * @allow (update) - Authenticated user updates a dispute.
     *   request.auth.uid != null
     * @allow (delete) - Authenticated user deletes a dispute.
     *   request.auth.uid != null
     * @deny (list) - Listing disputes is not permitted.
     *   N/A
     * @principle Requires authentication for all operations.
     */
    match /disputes/{disputeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows management of activity logs. Requires authentication.
     * @path /activityLogs/{logId}
     * @allow (create) - Authenticated user creates a new activity log.
     *   request.auth.uid != null
     * @allow (get) - Authenticated user reads an activity log.
     *   request.auth.uid != null
     * @allow (update) - Authenticated user updates an activity log.
     *   request.auth.uid != null
     * @allow (delete) - Authenticated user deletes an activity log.
     *   request.auth.uid != null
     * @deny (list) - Listing activity logs is not permitted.
     *   N/A
     * @principle Requires authentication for all operations.
     */
    match /activityLogs/{logId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to homepage banners.
     * @path /homepageBanners/{bannerId}
     * @allow (get) - Anyone can read a homepage banner.
     *   true
     * @allow (list) - Anyone can list homepage banners.
     *   true
     * @deny (create) - No one can create a homepage banner.
     *   false
     * @deny (update) - No one can update a homepage banner.
     *   false
     * @deny (delete) - No one can delete a homepage banner.
     *   false
     * @principle Provides public read access to homepage banners.
     */
    match /homepageBanners/{bannerId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to blog posts.
     * @path /blogPosts/{postId}
     * @allow (get) - Anyone can read a blog post.
     *   true
     * @allow (list) - Anyone can list blog posts.
     *   true
     * @deny (create) - No one can create a blog post.
     *   false
     * @deny (update) - No one can update a blog post.
     *   false
     * @deny (delete) - No one can delete a blog post.
     *   false
     * @principle Provides public read access to blog posts.
     */
    match /blogPosts/{postId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows management of site pages. Requires authentication.
     * @path /sitePages/{pageId}
     * @allow (create) - Authenticated user creates a new site page.
     *   request.auth.uid != null
     * @allow (get) - Authenticated user reads a site page.
     *   request.auth.uid != null
     * @allow (update) - Authenticated user updates a site page.
     *   request.auth.uid != null
     * @allow (delete) - Authenticated user deletes a site page.
     *   request.auth.uid != null
     * @deny (list) - Listing site pages is not permitted.
     *   N/A
     * @principle Requires authentication for all operations.
     */
    match /sitePages/{pageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows management of system alerts. Requires authentication.
     * @path /systemAlerts/{alertId}
     * @allow (create) - Authenticated user creates a new system alert.
     *   request.auth.uid != null
     * @allow (get) - Authenticated user reads a system alert.
     *   request.auth.uid != null
     * @allow (update) - Authenticated user updates a system alert.
     *   request.auth.uid != null
     * @allow (delete) - Authenticated user deletes a system alert.
     *   request.auth.uid != null
     * @deny (list) - Listing system alerts is not permitted.
     *   N/A
     * @principle Requires authentication for all operations.
     */
    match /systemAlerts/{alertId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}