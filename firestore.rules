rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) Signed-in user can create their own profile.
     * @allow (get) Signed-in user can get their own profile.
     * @allow (update) Signed-in user can update their own profile.
     * @allow (delete) Signed-in user can delete their own profile.
     * @deny (create) Non-signed-in user cannot create a profile.
     * @deny (update) Signed-in user cannot update another user's profile.
     * @deny (delete) Signed-in user cannot delete another user's profile.
     * @deny (list) Listing all users is not allowed.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to manufacturer profile data.
     * @path /manufacturers/{manufacturerId}
     * @allow (create) Signed-in user can create their own manufacturer profile.
     * @allow (get) Signed-in user can get their own manufacturer profile.
     * @allow (update) Signed-in user can update their own manufacturer profile.
     * @allow (delete) Signed-in user can delete their own manufacturer profile.
     * @deny (create) Non-signed-in user cannot create a manufacturer profile.
     * @deny (update) Signed-in user cannot update another manufacturer's profile.
     * @deny (delete) Signed-in user cannot delete another manufacturer's profile.
     * @deny (list) Listing all manufacturers is not allowed.
     * @principle Enforces document ownership for manufacturer profiles.
     */
    match /manufacturers/{manufacturerId} {
      allow get: if isSignedIn() && isOwner(manufacturerId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == manufacturerId;
      allow update: if isSignedIn() && isOwner(manufacturerId);
      allow delete: if isSignedIn() && isOwner(manufacturerId);
    }

    /**
     * @description Controls access to buyer profile data.
     * @path /buyers/{buyerId}
     * @allow (create) Signed-in user can create their own buyer profile.
     * @allow (get) Signed-in user can get their own buyer profile.
     * @allow (update) Signed-in user can update their own buyer profile.
     * @allow (delete) Signed-in user can delete their own buyer profile.
     * @deny (create) Non-signed-in user cannot create a buyer profile.
     * @deny (update) Signed-in user cannot update another buyer's profile.
     * @deny (delete) Signed-in user cannot delete another buyer's profile.
     * @deny (list) Listing all buyers is not allowed.
     * @principle Enforces document ownership for buyer profiles.
     */
    match /buyers/{buyerId} {
      allow get: if isSignedIn() && isOwner(buyerId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == buyerId;
      allow update: if isSignedIn() && isOwner(buyerId);
      allow delete: if isSignedIn() && isOwner(buyerId);
    }

    /**
     * @description Controls access to products owned by a manufacturer.
     * @path /manufacturers/{manufacturerId}/products/{productId}
     * @allow (create) Manufacturer can create products under their profile.
     * @allow (get) Any signed-in user can read a product.
     * @allow (update) Manufacturer can update products under their profile.
     * @allow (delete) Manufacturer can delete products under their profile.
     * @deny (create) Non-signed-in user cannot create a product.
     * @deny (update) Signed-in user cannot update another manufacturer's product.
     * @deny (delete) Signed-in user cannot delete another manufacturer's product.
     * @deny (list) Listing all products for a manufacturer is allowed for the manufacturer.
     * @principle Enforces manufacturer ownership for products.
     */
    match /manufacturers/{manufacturerId}/products/{productId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn() && isOwner(manufacturerId);
      allow create: if isSignedIn() && getManufacturerId() == manufacturerId;
      allow update: if isSignedIn() && getManufacturerId() == manufacturerId;
      allow delete: if isSignedIn() && getManufacturerId() == manufacturerId;
    }

    /**
     * @description Controls access to orders placed by a buyer.
     * @path /buyers/{buyerId}/orders/{orderId}
     * @allow (create) Buyer can create orders under their profile.
     * @allow (get) Signed-in user can get their own order.
     * @allow (update) Buyer can update orders under their profile.
     * @allow (delete) Buyer can delete orders under their profile.
     * @deny (create) Non-signed-in user cannot create an order.
     * @deny (update) Signed-in user cannot update another buyer's order.
     * @deny (delete) Signed-in user cannot delete another buyer's order.
     * @deny (list) Listing all orders is allowed for the order owner.
     * @principle Enforces buyer ownership for orders.
     */
    match /buyers/{buyerId}/orders/{orderId} {
      allow get: if isSignedIn() && isOwner(buyerId);
      allow list: if isSignedIn() && isOwner(buyerId);
      allow create: if isSignedIn() && getBuyerId() == buyerId;
      allow update: if isSignedIn() && getBuyerId() == buyerId;
      allow delete: if isSignedIn() && getBuyerId() == buyerId;
    }

    /**
     * @description Controls access to order items within an order.
     * @path /buyers/{buyerId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (create) Buyer can create order items under their order.
     * @allow (get) Signed-in user can get their own order item.
     * @allow (update) Buyer can update order items under their order.
     * @allow (delete) Buyer can delete order items under their order.
     * @deny (create) Non-signed-in user cannot create an order item.
     * @deny (update) Signed-in user cannot update another buyer's order item.
     * @deny (delete) Signed-in user cannot delete another buyer's order item.
     * @deny (list) Listing all order items for an order is allowed for the order owner.
     * @principle Enforces buyer ownership for order items.
     */
    match /buyers/{buyerId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get: if isSignedIn() && isOrderOwner(buyerId, orderId);
      allow list: if isSignedIn() && isOrderOwner(buyerId, orderId);
      allow create: if isSignedIn() && isOrderOwner(buyerId, orderId) && getBuyerId() == buyerId;
      allow update: if isSignedIn() && isOrderOwner(buyerId, orderId) && getBuyerId() == buyerId;
      allow delete: if isSignedIn() && isOrderOwner(buyerId, orderId) && getBuyerId() == buyerId;
    }

    /**
     * @description Controls access to quotations.
     * @path /quotations/{quotationId}
     * @allow (create) Signed-in user can create a quotation.
     * @allow (get) Any signed-in user can read a quotation.
     * @allow (update) Buyer or Manufacturer can update a quotation where they are involved.
     * @allow (delete) Buyer or Manufacturer can delete a quotation where they are involved.
     * @deny (create) Non-signed-in user cannot create a quotation.
     * @deny (update) Signed-in user cannot update a quotation where they are not involved.
     * @deny (delete) Signed-in user cannot delete a quotation where they are not involved.
     * @deny (list) Listing all quotations is not allowed for non ops users.
     * @principle Enforces that quotations can only be created, updated, or deleted by the involved buyer or manufacturer.
     */
    match /quotations/{quotationId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && (request.resource.data.buyerId == request.auth.uid || request.resource.data.manufacturerId == request.auth.uid);
      allow update: if isSignedIn() && (resource.data.buyerId == request.auth.uid || resource.data.manufacturerId == request.auth.uid);
      allow delete: if isSignedIn() && (resource.data.buyerId == request.auth.uid || resource.data.manufacturerId == request.auth.uid);
    }

    /**
     * @description Controls access to marketing campaigns owned by a manufacturer.
     * @path /manufacturers/{manufacturerId}/marketingCampaigns/{marketingCampaignId}
     * @allow (create) Manufacturer can create campaigns under their profile.
     * @allow (get) Any signed-in user can read marketing campaign.
     * @allow (update) Manufacturer can update campaigns under their profile.
     * @allow (delete) Manufacturer can delete campaigns under their profile.
     * @deny (create) Non-signed-in user cannot create a campaign.
     * @deny (update) Signed-in user cannot update another manufacturer's campaign.
     * @deny (delete) Signed-in user cannot delete another manufacturer's campaign.
     * @deny (list) Listing all campaigns for a manufacturer is allowed for the manufacturer.
     * @principle Enforces manufacturer ownership for marketing campaigns.
     */
    match /manufacturers/{manufacturerId}/marketingCampaigns/{marketingCampaignId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn() && isOwner(manufacturerId);
      allow create: if isSignedIn() && getManufacturerId() == manufacturerId;
      allow update: if isSignedIn() && getManufacturerId() == manufacturerId;
      allow delete: if isSignedIn() && getManufacturerId() == manufacturerId;
    }

    /**
     * @description Controls access to disputes.
     * @path /disputes/{disputeId}
     * @allow (get) Any signed-in user can read dispute.
     * @allow (create) Signed-in user can create dispute.
     * @allow (update) Signed-in user can update dispute.
     * @allow (delete) Signed-in user can delete dispute.
     * @deny (create) Non-signed-in user cannot create a dispute.
     * @deny (update) Signed-in user cannot update dispute where they are not involved.
     * @deny (delete) Signed-in user cannot delete dispute where they are not involved.
     * @deny (list) Listing all disputes is not allowed for non-ops users.
     * @principle Enforces that disputes can only be created, updated, or deleted by the involved parties.
     */
    match /disputes/{disputeId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && (request.resource.data.buyerId == request.auth.uid || request.resource.data.manufacturerId == request.auth.uid);
      allow update: if isSignedIn() && (resource.data.buyerId == request.auth.uid || resource.data.manufacturerId == request.auth.uid);
      allow delete: if isSignedIn() && (resource.data.buyerId == request.auth.uid || resource.data.manufacturerId == request.auth.uid);
    }

    /**
     * @description Controls access to activity logs.
     * @path /activityLogs/{logId}
     * @allow (get) Signed-in user can get activity log.
     * @allow (create) Signed-in user can create activity log.
     * @allow (update) Signed-in user can update activity log.
     * @allow (delete) Signed-in user can delete activity log.
     * @deny (create) Non-signed-in user cannot create activity log.
     * @deny (list) Listing all activity logs is not allowed for non-ops users.
     * @principle Only users with the 'ops' claim can read or write activity logs.
     */
    match /activityLogs/{logId} {
      allow get: if isSignedIn() && request.auth.token.ops == true;
      allow list: if isSignedIn() && request.auth.token.ops == true;
      allow create: if isSignedIn() && request.auth.token.ops == true;
      allow update: if isSignedIn() && request.auth.token.ops == true;
      allow delete: if isSignedIn() && request.auth.token.ops == true;
    }

    /**
     * @description Controls access to homepage banners.
     * @path /homepageBanners/{bannerId}
     * @allow (get) Any user can read homepage banner.
     * @allow (list) Any user can list homepage banners.
     * @allow (create) TODO: Add authorization for banner creation.
     * @allow (update) TODO: Add authorization for banner updates.
     * @allow (delete) TODO: Add authorization for banner deletion.
     * @principle Public read access with restricted write access (TODO).
     */
    match /homepageBanners/{bannerId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.auth.token.admin == true;  // TODO: Add authorization for banner creation
      allow update: if isSignedIn() && request.auth.token.admin == true;  // TODO: Add authorization for banner updates
      allow delete: if isSignedIn() && request.auth.token.admin == true;  // TODO: Add authorization for banner deletion
    }

    /**
     * @description Controls access to blog posts.
     * @path /blogPosts/{postId}
     * @allow (get) Any user can read blog post.
     * @allow (list) Any user can list blog posts.
     * @allow (create) TODO: Add authorization for blog post creation.
     * @allow (update) TODO: Add authorization for blog post updates.
     * @allow (delete) TODO: Add authorization for blog post deletion.
     * @principle Public read access with restricted write access (TODO).
     */
    match /blogPosts/{postId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.auth.token.editor == true;  // TODO: Add authorization for blog post creation
      allow update: if isSignedIn() && request.auth.token.editor == true;  // TODO: Add authorization for blog post updates
      allow delete: if isSignedIn() && request.auth.token.editor == true;  // TODO: Add authorization for blog post deletion
    }

    /**
     * @description Controls access to site pages.
     * @path /sitePages/{pageId}
     * @allow (get) Any user can read site pages.
     * @allow (list) Any user can list site pages.
     * @allow (create) TODO: Add authorization for site page creation.
     * @allow (update) TODO: Add authorization for site page updates.
     * @allow (delete) TODO: Add authorization for site page deletion.
     * @principle Public read access with restricted write access (TODO).
     */
    match /sitePages/{pageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.auth.token.admin == true;  // TODO: Add authorization for site page creation
      allow update: if isSignedIn() && request.auth.token.admin == true;  // TODO: Add authorization for site page updates
      allow delete: if isSignedIn() && request.auth.token.admin == true;  // TODO: Add authorization for site page deletion
    }

  }

  /**
   * @description Checks if the current user is signed in.
   * @returns {boolean} True if the user is signed in, false otherwise.
   * @example isSignedIn() == true
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the provided userId matches the authenticated user's UID.
   * @param {string} userId The user ID to compare against.
   * @returns {boolean} True if the user IDs match, false otherwise.
   * @example isOwner('user123') == true if request.auth.uid is 'user123'
   */
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    /**
   * @description Checks if the user is the owner of a quotation (buyer or manufacturer).
   * @param {string} buyerId The buyer ID associated with the quotation.
   * @param {string} manufacturerId The manufacturer ID associated with the quotation.
   * @returns {boolean} True if the user is either the buyer or the manufacturer, false otherwise.
   */
  function isQuotationOwner(buyerId, manufacturerId) {
    return request.auth.uid == buyerId || request.auth.uid == manufacturerId;
  }

      /**
   * @description Checks if the user is the owner of a dispute (buyer or manufacturer).
   * @param {string} buyerId The buyer ID associated with the dispute.
   * @param {string} manufacturerId The manufacturer ID associated with the dispute.
   * @returns {boolean} True if the user is either the buyer or the manufacturer, false otherwise.
   */
  function isDisputeOwner(buyerId, manufacturerId) {
    return request.auth.uid == buyerId || request.auth.uid == manufacturerId;
  }

  /**
   * @description Checks if the user is the owner of the order.
   * @param {string} buyerId The buyer ID of the order.
   * @param {string} orderId The order ID.
   * @returns {boolean} True if the user is the owner of the order, false otherwise.
   */
  function isOrderOwner(buyerId, orderId) {
    return request.auth.uid == buyerId;
  }


  /**
   * @description Checks if the user is the owner of an existing document.
   * @param {string} userId The user ID to compare against the resource data.
   * @returns {boolean} True if the user IDs match and the resource exists, false otherwise.
   * @example isExistingOwner('user123') == true if request.auth.uid is 'user123' and the document exists
   */
  function isExistingOwner(userId) {
    return request.auth.uid == userId;
  }

  /**
   * @description Checks if the user is the owner of an existing order document.
   * @param {string} buyerId The buyer ID to compare against the resource data.
   * @param {string} orderId The order ID
   * @returns {boolean} True if the user IDs match and the resource exists, false otherwise.
   * @example isExistingOrderOwner('user123') == true if request.auth.uid is 'user123' and the document exists
   */
    function isExistingOrderOwner(buyerId, orderId) {
    return request.auth.uid == buyerId;
  }

  function getBuyerId() {
    return request.auth.uid;
  }

   function getManufacturerId() {
    return request.auth.uid;
  }
}