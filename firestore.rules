/**
 * @description This ruleset enforces a strict ownership model for manufacturers, shops, buyers, products, orders, order items, payments, and marketing campaigns on the Tradinta platform.
 * @dataStructure
 *   - /manufacturers/{manufacturerId}: Stores manufacturer profiles.
 *   - /buyers/{buyerId}: Stores buyer profiles.
 *   - /shops/{shopId}: Stores shop profiles.
 *   - /shops/{shopId}/products/{productId}: Stores product listings for each shop.
 *   - /orders/{orderId}: Stores order details.
 *   - /orders/{orderId}/orderItems/{orderItemId}: Stores individual items within an order.
 *   - /payments/{paymentId}: Stores payment details.
 *   - /shops/{shopId}/marketingCampaigns/{marketingCampaignId}: Stores marketing campaigns for each shop.
 * @keySecurityDecisions
 *   - Manufacturers and buyers can only access their own profiles.
 *   - Shops can only be created and managed by their associated manufacturer.
 *   - Products can only be created and managed within their associated shop.
 *   - Orders are accessible to both the buyer and the shop involved.
 *   - Order items are accessible only within the context of their parent order.
 *   - Payments are linked to orders and accessible only within the context of their parent order.
 *   - Marketing campaigns can only be created and managed within their associated shop.
 *   - Listing manufacturers or buyers is disallowed.
 * @denormalizationForAuthorization
 *   - 'shopId' is denormalized into Products and MarketingCampaigns to enable shop-specific access control without extra reads.
 *   - 'shopId' and 'buyerId' are denormalized into Orders to facilitate order listing and access control based on the shop or buyer.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to manufacturer profiles. Manufacturers can only read and write their own profiles.
     * @path /manufacturers/{manufacturerId}
     * @allow (create) - Authenticated user creating a manufacturer profile where the manufacturerId matches their user ID.
     * @allow (get, update, delete) - Authenticated user accessing/modifying a manufacturer profile where the manufacturerId matches their user ID.
     * @deny (create) - Authenticated user attempting to create a manufacturer profile with a manufacturerId that does not match their user ID.
     * @deny (get, update, delete) - Authenticated user attempting to access/modify a manufacturer profile where the manufacturerId does not match their user ID.
     * @principle Enforces document ownership for all operations.
     */
    match /manufacturers/{manufacturerId} {
      allow get: if isSignedIn() && isOwner(manufacturerId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(manufacturerId) && request.resource.data.id == manufacturerId;
      allow update: if isSignedIn() && isOwner(manufacturerId) && resource.data.id == manufacturerId;
      allow delete: if isSignedIn() && isExistingOwner(manufacturerId);
    }

    /**
     * @description Controls access to buyer profiles. Buyers can only read and write their own profiles.
     * @path /buyers/{buyerId}
     * @allow (create) - Authenticated user creating a buyer profile where the buyerId matches their user ID.
     * @allow (get, update, delete) - Authenticated user accessing/modifying a buyer profile where the buyerId matches their user ID.
     * @deny (create) - Authenticated user attempting to create a buyer profile with a buyerId that does not match their user ID.
     * @deny (get, update, delete) - Authenticated user attempting to access/modify a buyer profile where the buyerId does not match their user ID.
     * @principle Enforces document ownership for all operations.
     */
    match /buyers/{buyerId} {
      allow get: if isSignedIn() && isOwner(buyerId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(buyerId) && request.resource.data.id == buyerId;
      allow update: if isSignedIn() && isOwner(buyerId) && resource.data.id == buyerId;
      allow delete: if isSignedIn() && isExistingOwner(buyerId);
    }

    /**
     * @description Controls access to shop profiles. Only the associated manufacturer can manage the shop.
     * @path /shops/{shopId}
     * @allow (create) - Authenticated user creating a shop profile where the manufacturerId in the shop data matches their user ID.
     * @allow (get, update, delete) - Authenticated user accessing/modifying a shop profile where the manufacturerId in the shop data matches their user ID.
     * @deny (create) - Authenticated user attempting to create a shop profile with a manufacturerId that does not match their user ID.
     * @deny (get, update, delete) - Authenticated user attempting to access/modify a shop profile where the manufacturerId does not match their user ID.
     * @principle Enforces manufacturer ownership for all shop operations.
     */
    match /shops/{shopId} {
      allow get: if isSignedIn() && isManufacturerOfShop(shopId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.manufacturerId == request.auth.uid && request.resource.data.id == shopId;
      allow update: if isSignedIn() && isManufacturerOfShop(shopId) && resource.data.id == shopId;
      allow delete: if isSignedIn() && isExistingManufacturerOfShop(shopId);
    }

    /**
     * @description Controls access to product listings within a shop. Only the shop's manufacturer can manage products.
     * @path /shops/{shopId}/products/{productId}
     * @allow (create) - Authenticated user creating a product where the shopId matches the parent shop and the user is the manufacturer.
     * @allow (get, update, delete) - Authenticated user accessing/modifying a product where the shopId matches the parent shop and the user is the manufacturer.
     * @deny (create) - Authenticated user attempting to create a product where the shopId does not match the parent shop or the user is not the manufacturer.
     * @deny (get, update, delete) - Authenticated user attempting to access/modify a product where the shopId does not match the parent shop or the user is not the manufacturer.
     * @principle Enforces shop ownership (via manufacturer) for all product operations.
     */
    match /shops/{shopId}/products/{productId} {
      allow get: if isSignedIn() && isManufacturerOfShop(shopId);
      allow list: if isSignedIn() && isManufacturerOfShop(shopId);
      allow create: if isSignedIn() && isManufacturerOfShop(shopId) && request.resource.data.shopId == shopId && request.resource.data.id == productId;
      allow update: if isSignedIn() && isManufacturerOfShop(shopId) && resource.data.shopId == shopId && resource.data.id == productId;
      allow delete: if isSignedIn() && isExistingManufacturerOfShop(shopId) && resource.data.shopId == shopId;
    }

    /**
     * @description Controls access to order details. Orders are accessible to both the buyer and the shop involved.
     * @path /orders/{orderId}
     * @allow (get, update, delete) - Authenticated user accessing/modifying an order where the user is either the buyer or the shop owner.
     * @deny (create) - Authenticated user attempting to create an order without being either the buyer or the shop owner.
     * @principle Enforces shared access based on buyer and shop relationships.
     */
    match /orders/{orderId} {
      allow get: if isSignedIn() && (isBuyerOfOrder(orderId) || isShopOfOrder(orderId));
      allow list: if isSignedIn() && (isBuyerOfOrder(orderId) || isShopOfOrder(orderId));
      allow create: if isSignedIn() && (request.resource.data.buyerId == request.auth.uid || isManufacturerOfShop(request.resource.data.shopId)) && request.resource.data.id == orderId;
      allow update: if isSignedIn() && (isBuyerOfOrder(orderId) || isShopOfOrder(orderId)) && resource.data.id == orderId;
      allow delete: if isSignedIn() && (isExistingBuyerOfOrder(orderId) || isExistingShopOfOrder(orderId));
    }

    /**
     * @description Controls access to order items within an order. Accessible only within the context of their parent order.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, update, delete) - Authenticated user accessing/modifying an order item only if they have access to the parent order.
     * @deny (create) - Authenticated user attempting to create an order item if they do not have access to the parent order.
     * @principle Enforces access control through the parent order relationship.
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
      allow get: if isSignedIn() && (isBuyerOfOrder(orderId) || isShopOfOrder(orderId));
      allow list: if isSignedIn() && (isBuyerOfOrder(orderId) || isShopOfOrder(orderId));
      allow create: if isSignedIn() && (isBuyerOfOrder(orderId) || isShopOfOrder(orderId)) && request.resource.data.orderId == orderId  && request.resource.data.id == orderItemId;
      allow update: if isSignedIn() && (isBuyerOfOrder(orderId) || isShopOfOrder(orderId)) && resource.data.orderId == orderId && resource.data.id == orderItemId;
      allow delete: if isSignedIn() && (isExistingBuyerOfOrder(orderId) || isExistingShopOfOrder(orderId)) && resource.data.orderId == orderId;
    }

    /**
     * @description Controls access to payment details. Payments are linked to orders and accessible only within the context of their parent order.
     * @path /payments/{paymentId}
     * @allow (get, update, delete) - Authenticated user accessing/modifying a payment only if they have access to the parent order.
     * @deny (create) - Authenticated user attempting to create a payment if they do not have access to the parent order.
     * @principle Enforces access control through the parent order relationship.
     */
    match /payments/{paymentId} {
      allow get: if isSignedIn() && (isBuyerOfOrder(resource.data.orderId) || isShopOfOrder(resource.data.orderId));
      allow list: if false; // Payments are generally not listable
      allow create: if isSignedIn() && (isBuyerOfOrder(request.resource.data.orderId) || isShopOfOrder(request.resource.data.orderId)) && request.resource.data.id == paymentId;
      allow update: if isSignedIn() && (isBuyerOfOrder(resource.data.orderId) || isShopOfOrder(resource.data.orderId)) && resource.data.id == paymentId;
      allow delete: if isSignedIn() && (isExistingBuyerOfOrder(resource.data.orderId) || isExistingShopOfOrder(resource.data.orderId));
    }

    /**
     * @description Controls access to marketing campaigns within a shop. Only the shop's manufacturer can manage campaigns.
     * @path /shops/{shopId}/marketingCampaigns/{marketingCampaignId}
     * @allow (create) - Authenticated user creating a campaign where the shopId matches the parent shop and the user is the manufacturer.
     * @allow (get, update, delete) - Authenticated user accessing/modifying a campaign where the shopId matches the parent shop and the user is the manufacturer.
     * @deny (create) - Authenticated user attempting to create a campaign where the shopId does not match the parent shop or the user is not the manufacturer.
     * @deny (get, update, delete) - Authenticated user attempting to access/modify a campaign where the shopId does not match the parent shop or the user is not the manufacturer.
     * @principle Enforces shop ownership (via manufacturer) for all campaign operations.
     */
    match /shops/{shopId}/marketingCampaigns/{marketingCampaignId} {
      allow get: if isSignedIn() && isManufacturerOfShop(shopId);
      allow list: if isSignedIn() && isManufacturerOfShop(shopId);
      allow create: if isSignedIn() && isManufacturerOfShop(shopId) && request.resource.data.shopId == shopId && request.resource.data.id == marketingCampaignId;
      allow update: if isSignedIn() && isManufacturerOfShop(shopId) && resource.data.shopId == shopId && resource.data.id == marketingCampaignId;
      allow delete: if isSignedIn() && isExistingManufacturerOfShop(shopId) && resource.data.shopId == shopId;
    }

    // --- Helper Functions ---

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }

    function isManufacturerOfShop(shopId) {
      return isSignedIn() && get(/databases/$(database)/documents/shops/$(shopId)).data.manufacturerId == request.auth.uid;
    }

    function isExistingManufacturerOfShop(shopId) {
      return isSignedIn() && isManufacturerOfShop(shopId) && resource != null;
    }

    function isBuyerOfOrder(orderId) {
      return isSignedIn() && get(/databases/$(database)/documents/orders/$(orderId)).data.buyerId == request.auth.uid;
    }

    function isExistingBuyerOfOrder(orderId) {
      return isSignedIn() && isBuyerOfOrder(orderId) && resource != null;
    }

    function isShopOfOrder(orderId) {
      return isSignedIn() && isManufacturerOfShop(get(/databases/$(database)/documents/orders/$(orderId)).data.shopId);
    }

    function isExistingShopOfOrder(orderId) {
      return isSignedIn() && isShopOfOrder(orderId) && resource != null;
    }
  }
}