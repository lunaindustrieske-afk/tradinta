rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and the resource exists.
     *              This is for destructive operations.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource);
    }

    /**
     * @description Enforces that the incoming resource data contains the correct owner ID on create.
     * @param {string} userId - The user ID that should match the request's authentication UID.
     * @returns {boolean} True if the owner ID in the data matches the authenticated user's ID, false otherwise.
     */
    function isCreatingWithOwnerId(userId) {
        return isSignedIn() && request.resource.data.id == userId;
    }

    /**
     * @description Enforces that the resource data's owner ID is immutable.
     * @param {string} userId - The user ID that should match the request's authentication UID.
     * @returns {boolean} True if the owner ID in the data matches the existing resource's owner ID, false otherwise.
     */
    function isOwnerIdImmutable(userId) {
        return request.resource.data.id == resource.data.id;
    }
    
    /**
     * @description Rule for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile (userId matches auth.uid).
     * @allow (get) - Authenticated user can get their own profile.
     * @allow (update) - Authenticated user can update their own profile.
     * @deny  (create) - Authenticated user tries to create a profile with a different userId.
     * @deny  (delete) - No one can delete a user profile.
     * @principle Enforces document ownership for writes; reads are public.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Rules for manufacturer profiles.
     * @path /manufacturers/{manufacturerId}
     * @allow (create) - Authenticated user creates their own profile (manufacturerId matches auth.uid).
     * @allow (get) - Anyone can get a manufacturer profile.
     * @allow (update) - Authenticated user can update their own profile.
     * @deny (create) - Authenticated user tries to create a profile with a different manufacturerId.
     * @deny (delete) - No one can delete a manufacturer profile.
     * @principle Enforces document ownership for writes; reads are public.
     */
    match /manufacturers/{manufacturerId} {
      allow get: if true;
      allow list: if false;
      allow create: if isOwner(manufacturerId);
      allow update: if isOwner(manufacturerId);
      allow delete: if false;
    }

    /**
     * @description Rules for buyer profiles.
     * @path /buyers/{buyerId}
     * @allow (create) - Authenticated user creates their own profile (buyerId matches auth.uid).
     * @allow (get) - Anyone can get a buyer profile.
     * @allow (update) - Authenticated user can update their own profile.
     * @deny (create) - Authenticated user tries to create a profile with a different buyerId.
     * @deny (delete) - No one can delete a buyer profile.
     * @principle Enforces document ownership for writes; reads are public.
     */
    match /buyers/{buyerId} {
      allow get: if true;
      allow list: if false;
      allow create: if isOwner(buyerId);
      allow update: if isOwner(buyerId);
      allow delete: if false;
    }

    /**
     * @description Rules for products owned by a manufacturer.
     * @path /manufacturers/{manufacturerId}/products/{productId}
     * @allow (create) - Manufacturer can create a product under their ID.
     * @allow (get) - Anyone can get a product.
     * @allow (update) - Manufacturer can update their own product.
     * @deny (create) - Someone else tries to create a product under a different manufacturerId.
     * @deny (delete) - Someone else tries to delete a product under a different manufacturerId.
     * @principle Enforces document ownership for writes; reads are public.
     */
    match /manufacturers/{manufacturerId}/products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if isOwner(manufacturerId);
      allow update: if isOwner(manufacturerId);
      allow delete: if isOwner(manufacturerId);
    }

    /**
     * @description Rules for orders placed by a buyer.
     * @path /buyers/{buyerId}/orders/{orderId}
     * @allow (create) - Buyer can create an order under their ID.
     * @allow (get) - Authenticated user can get an order.
     * @allow (update) - Buyer can update their own order.
     * @deny (create) - Someone else tries to create an order under a different buyerId.
     * @deny (delete) - Someone else tries to delete an order under a different buyerId.
     * @principle Enforces document ownership for writes; reads are public.
     */
    match /buyers/{buyerId}/orders/{orderId} {
      allow get: if isOwner(buyerId);
      allow list: if false;
      allow create: if isOwner(buyerId);
      allow update: if isOwner(buyerId);
      allow delete: if isOwner(buyerId);
    }

    /**
     * @description Rules for order items within an order.
     * @path /buyers/{buyerId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (create) - Buyer can create an order item under their order.
     * @allow (get) - Authenticated user can get an order item.
     * @allow (update) - Buyer can update their own order item.
     * @deny (create) - Someone else tries to create an order item under a different orderId.
     * @deny (delete) - Someone else tries to delete an order item under a different orderId.
     * @principle Enforces document ownership for writes; reads are public.
     */
    match /buyers/{buyerId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get: if isOwner(buyerId);
      allow list: if false;
      allow create: if isOwner(buyerId);
      allow update: if isOwner(buyerId);
      allow delete: if isOwner(buyerId);
    }

    /**
     * @description Rules for quotations.
     * @path /quotations/{quotationId}
     * @allow (create) - Authenticated user can create a quotation.
     * @allow (get) - Authenticated user can get a quotation.
     * @allow (update) - Authenticated user can update a quotation.
     * @deny (delete) - No one can delete a quotation.
     * @principle Enforces document ownership for writes; reads are public.
     */
    match /quotations/{quotationId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Rules for marketing campaigns owned by a manufacturer.
     * @path /manufacturers/{manufacturerId}/marketingCampaigns/{marketingCampaignId}
     * @allow (create) - Manufacturer can create a marketing campaign under their ID.
     * @allow (get) - Authenticated user can get a marketing campaign.
     * @allow (update) - Manufacturer can update their own marketing campaign.
     * @deny (create) - Someone else tries to create a marketing campaign under a different manufacturerId.
     * @deny (delete) - Someone else tries to delete a marketing campaign under a different manufacturerId.
     * @principle Enforces document ownership for writes; reads are public.
     */
    match /manufacturers/{manufacturerId}/marketingCampaigns/{marketingCampaignId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isOwner(manufacturerId);
      allow update: if isOwner(manufacturerId);
      allow delete: if isOwner(manufacturerId);
    }

     /**
      * @description Rules for disputes.
      * @path /disputes/{disputeId}
      * @allow (create) - Authenticated user can create a dispute.
      * @allow (get) - Authenticated user can get a dispute.
      * @allow (update) - Authenticated user can update a dispute.
      * @deny (delete) - No one can delete a dispute.
      */
    match /disputes/{disputeId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }
  }
}