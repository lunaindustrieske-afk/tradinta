/**
 * @fileoverview Firestore Security Rules for the Tradinta platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for manufacturers and buyers,
 * ensuring that each user can only access their own data. Quotations are accessible
 * based on the buyerId and manufacturerId present within the document.
 *
 * Data Structure:
 * - /manufacturers/{manufacturerId}: Stores manufacturer profiles.
 * - /buyers/{buyerId}: Stores buyer profiles.
 * - /manufacturers/{manufacturerId}/products/{productId}: Stores products owned by a manufacturer.
 * - /buyers/{buyerId}/orders/{orderId}: Stores orders placed by a buyer.
 * - /buyers/{buyerId}/orders/{orderId}/orderItems/{orderItemId}: Stores order items within an order.
 * - /quotations/{quotationId}: Stores quotations with denormalized buyerId and manufacturerId.
 * - /manufacturers/{manufacturerId}/marketingCampaigns/{marketingCampaignId}: Stores marketing campaigns owned by a manufacturer.
 *
 * Key Security Decisions:
 * - Users (manufacturers and buyers) can only read and write their own profile data.
 * - Manufacturers can only manage their own products and marketing campaigns.
 * - Buyers can only manage their own orders.
 * - Quotations can be read/written only by the associated buyer or manufacturer.
 * - Listing of manufacturers and buyers is disallowed to protect user privacy.
 *
 * Denormalization for Authorization:
 * - Quotations include both 'buyerId' and 'manufacturerId' to allow for direct authorization checks
 *   without requiring additional 'get()' operations. This dramatically simplifies and speeds up security rule evaluation.
 */

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Verifies user authentication.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user ownership.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID and the resource exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user ownership and resource existence.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rule for manufacturer profiles.
     * @path /manufacturers/{manufacturerId}
     * @allow (create) - A manufacturer can create their profile if the UID matches the manufacturerId.
     * @allow (get, update, delete) - A manufacturer can only access/modify their own profile.
     * @deny (create) - A manufacturer cannot create a profile with an ID that doesn't match their UID.
     * @deny (get, update, delete) - A manufacturer cannot access/modify another manufacturer's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /manufacturers/{manufacturerId} {
      allow get: if false;
      allow list: if false;

      allow create: if isOwner(manufacturerId) && request.resource.data.id == manufacturerId;
      allow update: if isExistingOwner(manufacturerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(manufacturerId);
    }

    /**
     * @description Rule for buyer profiles.
     * @path /buyers/{buyerId}
     * @allow (create) - A buyer can create their profile if the UID matches the buyerId.
     * @allow (get, update, delete) - A buyer can only access/modify their own profile.
     * @deny (create) - A buyer cannot create a profile with an ID that doesn't match their UID.
     * @deny (get, update, delete) - A buyer cannot access/modify another buyer's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /buyers/{buyerId} {
      allow get: if false;
      allow list: if false;

      allow create: if isOwner(buyerId) && request.resource.data.id == buyerId;
      allow update: if isExistingOwner(buyerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(buyerId);
    }

    /**
     * @description Rule for products owned by a manufacturer.
     * @path /manufacturers/{manufacturerId}/products/{productId}
     * @allow (create, get, list, update, delete) - A manufacturer can manage their own products.
     * @deny (create, get, list, update, delete) - A manufacturer cannot manage another manufacturer's products.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /manufacturers/{manufacturerId}/products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if isOwner(manufacturerId) && request.resource.data.manufacturerId == manufacturerId;
      allow update: if isExistingOwner(manufacturerId) && resource.data.manufacturerId == manufacturerId;
      allow delete: if isExistingOwner(manufacturerId);
    }

    /**
     * @description Rule for orders placed by a buyer.
     * @path /buyers/{buyerId}/orders/{orderId}
     * @allow (create, get, list, update, delete) - A buyer can manage their own orders.
     * @deny (create, get, list, update, delete) - A buyer cannot manage another buyer's orders.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /buyers/{buyerId}/orders/{orderId} {
      allow get: if isOwner(buyerId);
      allow list: if isOwner(buyerId);
      allow create: if isOwner(buyerId) && request.resource.data.buyerId == buyerId;
      allow update: if isExistingOwner(buyerId) && resource.data.buyerId == buyerId;
      allow delete: if isExistingOwner(buyerId);
    }

    /**
     * @description Rule for order items within an order.
     * @path /buyers/{buyerId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (create, get, list, update, delete) - A buyer can manage their own order items within their orders.
     * @deny (create, get, list, update, delete) - A buyer cannot manage another buyer's order items.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /buyers/{buyerId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get: if isOwner(buyerId);
      allow list: if isOwner(buyerId);
      allow create: if isOwner(buyerId);
      allow update: if isExistingOwner(buyerId);
      allow delete: if isExistingOwner(buyerId);
    }

    /**
     * @description Rule for quotations.
     * @path /quotations/{quotationId}
     * @allow (get, list) - A buyer or manufacturer can get/list quotations if their ID matches either the buyerId or manufacturerId.
     * @allow (create) - A buyer or manufacturer can create a quotation.
     * @allow (update, delete) - A buyer or manufacturer can update/delete a quotation where their ID matches either the buyerId or manufacturerId.
     * @deny (create, get, list, update, delete) - A user cannot access quotations that do not belong to them (where their ID doesn't match either buyerId or manufacturerId).
     * @principle Enforces access control based on buyerId and manufacturerId.
     */
    match /quotations/{quotationId} {
      allow get: if request.auth.uid == resource.data.buyerId || request.auth.uid == resource.data.manufacturerId;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rule for marketing campaigns owned by a manufacturer.
     * @path /manufacturers/{manufacturerId}/marketingCampaigns/{marketingCampaignId}
     * @allow (create, get, list, update, delete) - A manufacturer can manage their own marketing campaigns.
     * @deny (create, get, list, update, delete) - A manufacturer cannot manage another manufacturer's marketing campaigns.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /manufacturers/{manufacturerId}/marketingCampaigns/{marketingCampaignId} {
      allow get: if isOwner(manufacturerId);
      allow list: if isOwner(manufacturerId);
      allow create: if isOwner(manufacturerId) && request.resource.data.manufacturerId == manufacturerId;
      allow update: if isExistingOwner(manufacturerId) && resource.data.manufacturerId == manufacturerId;
      allow delete: if isExistingOwner(manufacturerId);
    }
  }
}