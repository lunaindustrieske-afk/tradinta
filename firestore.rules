/**
 * @fileoverview Firestore Security Rules for Tradinta Marketplace.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * manufacturer profiles, buyer profiles, products, orders, and marketing campaigns.
 * Quotations leverage a denormalized structure to allow simpler, more performant authorization checks.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, where {userId} is the Firebase Auth UID.
 * - /manufacturers/{manufacturerId}: Stores manufacturer profiles, where {manufacturerId} is the Firebase Auth UID.
 * - /buyers/{buyerId}: Stores buyer profiles, where {buyerId} is the Firebase Auth UID.
 * - /manufacturers/{manufacturerId}/products/{productId}: Stores products owned by a manufacturer.
 * - /buyers/{buyerId}/orders/{orderId}: Stores orders placed by a buyer.
 * - /buyers/{buyerId}/orders/{orderId}/orderItems/{orderItemId}: Stores order items within an order.
 * - /quotations/{quotationId}: Stores quotations, with denormalized buyerId and manufacturerId.
 * - /manufacturers/{manufacturerId}/marketingCampaigns/{marketingCampaignId}: Stores marketing campaigns owned by a manufacturer.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Manufacturers and buyers can only manage their own profiles, products, orders, and marketing campaigns.
 * - Quotations can be read and written by either the buyer or the manufacturer involved.
 * - Listing user profiles, manufacturer profiles, and buyer profiles is disallowed.
 *
 * Denormalization for Authorization:
 * - The 'quotations' collection denormalizes both `buyerId` and `manufacturerId` to avoid costly `get()` calls during authorization.
 *
 * Structural Segregation:
 * - Private data (user profiles, manufacturer data, buyer data) is stored in separate collections with strict ownership checks,
 *   ensuring that one user cannot access another user's private data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines if the user is signed in
     * @allow if signed in
     * @deny if not signed in
     * @principle Identity verification.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines if the requesting user ID matches the provided user ID.
     * @allow if user ID matches.
     * @deny if user ID does not match.
     * @principle Enforces ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Defines if the user is signed in and owns the existing document.
     * @allow if user ID matches.
     * @deny if user ID does not match.
     * @principle Enforces ownership.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Secure the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - If the user is creating their own profile (request.auth.uid == userId).
     * @allow (get, update, delete) - If the user is the owner of the profile (request.auth.uid == userId).
     * @deny (create) - If the user is creating a profile for someone else (request.auth.uid != userId).
     * @deny (get, update, delete) - If the user is not the owner of the profile (request.auth.uid != userId).
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      // Only allow a user to create their own profile.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Secure the /manufacturers/{manufacturerId} collection.
     * @path /manufacturers/{manufacturerId}
     * @allow (create) - If the user is creating their own profile (request.auth.uid == manufacturerId).
     * @allow (get, update, delete) - If the user is the owner of the profile (request.auth.uid == manufacturerId).
     * @deny (create) - If the user is creating a profile for someone else (request.auth.uid != manufacturerId).
     * @deny (get, update, delete) - If the user is not the owner of the profile (request.auth.uid != manufacturerId).
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /manufacturers/{manufacturerId} {
      allow create: if isSignedIn() && isOwner(manufacturerId);
      allow get: if isOwner(manufacturerId);
      allow update: if isExistingOwner(manufacturerId);
      allow delete: if isExistingOwner(manufacturerId);
      allow list: if false;
    }

    /**
     * @description Secure the /buyers/{buyerId} collection.
     * @path /buyers/{buyerId}
     * @allow (create) - If the user is creating their own profile (request.auth.uid == buyerId).
     * @allow (get, update, delete) - If the user is the owner of the profile (request.auth.uid == buyerId).
     * @deny (create) - If the user is creating a profile for someone else (request.auth.uid != buyerId).
     * @deny (get, update, delete) - If the user is not the owner of the profile (request.auth.uid != buyerId).
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /buyers/{buyerId} {
      allow create: if isSignedIn() && isOwner(buyerId);
      allow get: if isOwner(buyerId);
      allow update: if isExistingOwner(buyerId);
      allow delete: if isExistingOwner(buyerId);
      allow list: if false;
    }

    /**
     * @description Secure the /manufacturers/{manufacturerId}/products/{productId} collection.
     * @path /manufacturers/{manufacturerId}/products/{productId}
     * @allow (create, get, update, delete) - If the user is the owner of the manufacturer profile (request.auth.uid == manufacturerId).
     * @deny (create, get, update, delete) - If the user is not the owner of the manufacturer profile (request.auth.uid != manufacturerId).
     * @principle Enforces document ownership for writes and restricts access to a manufacturer's own products.
     */
    match /manufacturers/{manufacturerId}/products/{productId} {
      allow create: if isSignedIn() && isOwner(manufacturerId);
      allow get: if true;
      allow update: if isExistingOwner(manufacturerId);
      allow delete: if isExistingOwner(manufacturerId);
      allow list: if true;
    }

    /**
     * @description Secure the /buyers/{buyerId}/orders/{orderId} collection.
     * @path /buyers/{buyerId}/orders/{orderId}
     * @allow (create, get, update, delete) - If the user is the owner of the buyer profile (request.auth.uid == buyerId).
     * @deny (create, get, update, delete) - If the user is not the owner of the buyer profile (request.auth.uid != buyerId).
     * @principle Enforces document ownership for writes and restricts access to a buyer's own orders.
     */
    match /buyers/{buyerId}/orders/{orderId} {
      allow create: if isSignedIn() && isOwner(buyerId);
      allow get: if isOwner(buyerId);
      allow update: if isExistingOwner(buyerId);
      allow delete: if isExistingOwner(buyerId);
      allow list: if isOwner(buyerId);
    }

    /**
     * @description Secure the /buyers/{buyerId}/orders/{orderId}/orderItems/{orderItemId} collection.
     * @path /buyers/{buyerId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow (create, get, update, delete) - If the user is the owner of the buyer profile (request.auth.uid == buyerId).
     * @deny (create, get, update, delete) - If the user is not the owner of the buyer profile (request.auth.uid != buyerId).
     * @principle Enforces document ownership for writes and restricts access to a buyer's own order items.
     */
    match /buyers/{buyerId}/orders/{orderId}/orderItems/{orderItemId} {
      allow create: if isSignedIn() && isOwner(buyerId);
      allow get: if isOwner(buyerId);
      allow update: if isExistingOwner(buyerId);
      allow delete: if isExistingOwner(buyerId);
      allow list: if isOwner(buyerId);
    }

    /**
     * @description Secure the /quotations/{quotationId} collection.
     * @path /quotations/{quotationId}
     * @allow (get, create, update, delete) - If the user is the buyer or manufacturer associated with the quotation.
     * @deny (get, create, update, delete) - If the user is not the buyer or manufacturer associated with the quotation.
     * @principle Enforces access based on buyerId and manufacturerId denormalized fields.
     */
    match /quotations/{quotationId} {
      allow create: if isSignedIn() && (request.resource.data.buyerId == request.auth.uid || request.resource.data.manufacturerId == request.auth.uid);
      allow get: if request.auth.uid == resource.data.buyerId || request.auth.uid == resource.data.manufacturerId;
      allow update: if isSignedIn() && (resource.data.buyerId == request.auth.uid || resource.data.manufacturerId == request.auth.uid);
      allow delete: if isSignedIn() && (resource.data.buyerId == request.auth.uid || resource.data.manufacturerId == request.auth.uid);
      allow list: if true;
    }

    /**
     * @description Secure the /manufacturers/{manufacturerId}/marketingCampaigns/{marketingCampaignId} collection.
     * @path /manufacturers/{manufacturerId}/marketingCampaigns/{marketingCampaignId}
     * @allow (create, get, update, delete) - If the user is the owner of the manufacturer profile (request.auth.uid == manufacturerId).
     * @deny (create, get, update, delete) - If the user is not the owner of the manufacturer profile (request.auth.uid != manufacturerId).
     * @principle Enforces document ownership for writes and restricts access to a manufacturer's own marketing campaigns.
     */
    match /manufacturers/{manufacturerId}/marketingCampaigns/{marketingCampaignId} {
      allow create: if isSignedIn() && isOwner(manufacturerId);
      allow get: if isOwner(manufacturerId);
      allow update: if isExistingOwner(manufacturerId);
      allow delete: if isExistingOwner(manufacturerId);
       allow list: if isOwner(manufacturerId);
    }
  }
}