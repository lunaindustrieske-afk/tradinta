/**
 * @fileoverview Firestore Security Rules for Tradinta Marketplace.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for most data,
 * with specific exceptions for public content and administrative functions.
 *
 * Data Structure:
 * - User profiles are stored under /users/{userId}.
 * - Manufacturer profiles are stored under /manufacturers/{manufacturerId}.
 * - Buyer profiles are stored under /buyers/{buyerId}.
 * - Products, MarketingCampaigns, and Reviews are nested under their
 *   respective manufacturers.
 * - Orders and OrderItems are nested under their respective buyers.
 * - Quotations, Disputes, ActivityLogs, HomepageBanners, BlogPosts, SitePages,
 *   and SystemAlerts are stored in top-level collections.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted for HomepageBanners and BlogPosts.
 * - Strict ownership is enforced for user and manufacturer data.
 * - Administrative access is required for ActivityLogs and SystemAlerts.
 * - Quotations denormalize buyerId and manufacturerId for simplified authorization.
 *
 * Denormalization for Authorization:
 * - Quotations: `buyerId` and `manufacturerId` are denormalized onto each
 *   quotation document. This avoids costly `get()` calls to determine access.
 *
 * Structural Segregation:
 * - Private user data (profiles, orders) is segregated under user-specific
 *   paths, while public content (banners, blog posts) is stored in top-level
 *   collections. This simplifies access control and improves query performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure root access
     * @path /
     * @allow (get, list) if false;
     * @allow (create, update, delete) if false;
     * @deny N/A
     * @principle Secure root access
     */
    match /{document=**} {
      allow read, write: if false;
    }

    // Helper function to check if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the authenticated user's UID matches the
    // provided userId.
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    //Helper function to check if the authenticated user is the owner of an
    //existing document.
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    // Helper function to check for admin claims
    function isAdmin() {
        return isSignedIn() && (request.auth.token.admin == true || request.auth.token.ops == true)
    }

    /**
     * @description Allows a user to read and write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if isOwner(userId);
     * @allow (list) if false;
     * @deny (create) if request.resource.data.tradintaId != request.auth.uid;
     * @deny (update) if request.resource.data.tradintaId != resource.data.tradintaId;
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.tradintaId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.tradintaId == resource.data.tradintaId;
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Allows write access for creating password reset tokens and restricts list access.
      * @path /passwordResetTokens/{tokenId}
      * @allow create: if true; // TODO: Add validation to ensure only server-side can create and only for valid users
      * @allow get: if false;
      * @allow list: if false;
      * @allow update: if false;
      * @allow delete: if false;
      * @deny N/A
      * @principle Restricts access to password reset tokens.
      */
    match /passwordResetTokens/{tokenId} {
        allow get: if false;
        allow list: if false;
        allow create: if false; // TODO: Add validation to ensure only server-side can create and only for valid users
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows a manufacturer to read and write their own profile.
     * @path /manufacturers/{manufacturerId}
     * @allow (get, create, update, delete) if isOwner(manufacturerId);
     * @allow (list) if false;
     * @deny (create) if request.resource.data.id != request.auth.uid;
     * @deny (update) if request.resource.data.id != resource.data.id;
     * @principle Enforces document ownership for writes.
     */
    match /manufacturers/{manufacturerId} {
      allow get: if isOwner(manufacturerId);
      allow list: if false;
      allow create: if isOwner(manufacturerId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(manufacturerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(manufacturerId);
    }

    /**
     * @description Allows a buyer to read and write their own profile.
     * @path /buyers/{buyerId}
     * @allow (get, create, update, delete) if isOwner(buyerId);
     * @allow (list) if false;
     * @deny (create) if request.resource.data.id != request.auth.uid;
     * @deny (update) if request.resource.data.id != resource.data.id;
     * @principle Enforces document ownership for writes.
     */
    match /buyers/{buyerId} {
      allow get: if isOwner(buyerId);
      allow list: if false;
      allow create: if isOwner(buyerId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(buyerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(buyerId);
    }

    /**
     * @description Allows a manufacturer to manage their own products.
     * @path /manufacturers/{manufacturerId}/products/{productId}
     * @allow (get, list, create, update, delete) if isOwner(manufacturerId);
     * @deny (create) if request.resource.data.manufacturerId != manufacturerId;
     * @deny (update) if request.resource.data.manufacturerId != resource.data.manufacturerId;
     * @principle Enforces ownership via the manufacturerId.
     */
    match /manufacturers/{manufacturerId}/products/{productId} {
      allow get: if isOwner(manufacturerId);
      allow list: if isOwner(manufacturerId);
      allow create: if isOwner(manufacturerId) && request.resource.data.manufacturerId == manufacturerId;
      allow update: if isExistingOwner(manufacturerId) && request.resource.data.manufacturerId == resource.data.manufacturerId;
      allow delete: if isExistingOwner(manufacturerId);
    }

      /**
       * @description Allows access control for product reviews.
       * @path /manufacturers/{manufacturerId}/products/{productId}/reviews/{reviewId}
       * @allow get: if true; // Publicly readable
       * @allow list: if true; // Publicly listable
       * @allow create: if isSignedIn(); // Any signed-in user can create a review
       * @allow update: if false; // Reviews cannot be updated
       * @allow delete: if false; // Reviews cannot be deleted
       * @deny N/A
       * @principle Controls who can create, read, and modify product reviews.
       */
    match /manufacturers/{manufacturerId}/products/{productId}/reviews/{reviewId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a buyer to manage their own orders.
     * @path /buyers/{buyerId}/orders/{orderId}
     * @allow (get, list, create, update, delete) if isOwner(buyerId);
     * @deny (create) if request.resource.data.buyerId != buyerId;
     * @deny (update) if request.resource.data.buyerId != resource.data.buyerId;
     * @principle Enforces ownership via the buyerId.
     */
    match /buyers/{buyerId}/orders/{orderId} {
      allow get: if isOwner(buyerId);
      allow list: if isOwner(buyerId);
      allow create: if isOwner(buyerId) && request.resource.data.buyerId == buyerId;
      allow update: if isExistingOwner(buyerId) && request.resource.data.buyerId == resource.data.buyerId;
      allow delete: if isExistingOwner(buyerId);
    }

    /**
     * @description Allows access control for order items.
     * @path /buyers/{buyerId}/orders/{orderId}/orderItems/{orderItemId}
     * @allow get: if isOwner(buyerId);
     * @allow list: if isOwner(buyerId);
     * @allow create: if isOwner(buyerId);
     * @allow update: if isExistingOwner(buyerId);
     * @allow delete: if isExistingOwner(buyerId);
     * @deny (create) if request.resource.data.orderId != orderId;
     * @deny (update) if request.resource.data.orderId != resource.data.orderId;
     * @principle Enforces ownership via the buyerId.
     */
    match /buyers/{buyerId}/orders/{orderId}/orderItems/{orderItemId} {
      allow get: if isOwner(buyerId);
      allow list: if isOwner(buyerId);
      allow create: if isOwner(buyerId) && request.resource.data.orderId == orderId;
      allow update: if isExistingOwner(buyerId) && request.resource.data.orderId == resource.data.orderId;
      allow delete: if isExistingOwner(buyerId);
    }

    /**
     * @description Allows access control for quotations. Quotations are accessible by the buyer or the manufacturer.
     * @path /quotations/{quotationId}
     * @allow get: if request.auth.uid == resource.data.buyerId || request.auth.uid == resource.data.manufacturerId;
     * @allow list: if false; // Listing not allowed.  Must query.
     * @allow create: if isSignedIn(); // Any signed in user can create a quotation.
     * @allow update: if request.auth.uid == resource.data.manufacturerId;
     * @allow delete: if false; // Deletion not allowed.
     * @deny N/A
     * @principle Allows manufacturer and buyer to view their own quotations.
     */
    match /quotations/{quotationId} {
      allow get: if isSignedIn() && (request.auth.uid == resource.data.buyerId || request.auth.uid == resource.data.manufacturerId);
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(resource.data.manufacturerId) && request.auth.uid == resource.data.manufacturerId;
      allow delete: if false;
    }

    /**
     * @description Allows a manufacturer to manage their own marketing campaigns.
     * @path /manufacturers/{manufacturerId}/marketingCampaigns/{marketingCampaignId}
     * @allow (get, list, create, update, delete) if isOwner(manufacturerId);
     * @deny (create) if request.resource.data.manufacturerId != manufacturerId;
     * @deny (update) if request.resource.data.manufacturerId != resource.data.manufacturerId;
     * @principle Enforces ownership via the manufacturerId.
     */
    match /manufacturers/{manufacturerId}/marketingCampaigns/{marketingCampaignId} {
      allow get: if isOwner(manufacturerId);
      allow list: if isOwner(manufacturerId);
      allow create: if isOwner(manufacturerId) && request.resource.data.manufacturerId == manufacturerId;
      allow update: if isExistingOwner(manufacturerId) && request.resource.data.manufacturerId == resource.data.manufacturerId;
      allow delete: if isExistingOwner(manufacturerId);
    }

    /**
     * @description Allows access control for disputes. Disputes are accessible by admins, the buyer, or the manufacturer involved.
     * @path /disputes/{disputeId}
     * @allow get: if isAdmin() || request.auth.uid == resource.data.buyerId || request.auth.uid == resource.data.manufacturerId;
     * @allow list: if isAdmin();
     * @allow create: if isSignedIn(); // Any signed in user can create a dispute.
     * @allow update: if isAdmin(); // Only admins can update disputes.
     * @allow delete: if false; // Deletion not allowed.
     * @deny N/A
     * @principle Allows admin and parties involved to view the dispute.
     */
    match /disputes/{disputeId} {
      allow get: if isSignedIn() && (isAdmin() || request.auth.uid == resource.data.buyerId || request.auth.uid == resource.data.manufacturerId);
      allow list: if isAdmin();
      allow create: if isSignedIn();
      allow update: if isAdmin();
      allow delete: if false;
    }

    /**
     * @description Allows access control for activity logs. Only admins can read/write activity logs.
     * @path /activityLogs/{logId}
     * @allow get: if isAdmin();
     * @allow list: if isAdmin();
     * @allow create: if isAdmin(); // TODO: Add validation to ensure only server-side can create logs
     * @allow update: if false; // No updates allowed
     * @allow delete: if false; // No deletions allowed
     * @deny N/A
     * @principle Restricts access to activity logs to admins only.
     */
    match /activityLogs/{logId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin(); // TODO: Add validation to ensure only server-side can create logs
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access for homepage banners, but restricts write access.
     * @path /homepageBanners/{bannerId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if isAdmin();
     * @allow update: if isAdmin();
     * @allow delete: if isAdmin();
     * @deny N/A
     * @principle Public read, admin-only write.
     */
    match /homepageBanners/{bannerId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access for blog posts, but restricts write access.
     * @path /blogPosts/{postId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if isAdmin();
     * @allow update: if isAdmin();
     * @allow delete: if isAdmin();
     * @deny N/A
     * @principle Public read, admin-only write.
     */
    match /blogPosts/{postId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows access control for site pages.
     * @path /sitePages/{pageId}
     * @allow get: if true; // Publicly readable
     * @allow list: if true; // Publicly listable
     * @allow create: if isAdmin();
     * @allow update: if isAdmin();
     * @allow delete: if isAdmin();
     * @deny N/A
     * @principle Controls who can read, create, and modify site pages.
     */
    match /sitePages/{pageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows access control for system alerts. Only admins can read/write system alerts.
     * @path /systemAlerts/{alertId}
     * @allow get: if isAdmin();
     * @allow list: if isAdmin();
     * @allow create: if isAdmin();
     * @allow update: if isAdmin();
     * @allow delete: if isAdmin();
     * @deny N/A
     * @principle Restricts access to system alerts to admins only.
     */
    match /systemAlerts/{alertId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}