{
  "entities": {
    "Manufacturer": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Manufacturer",
      "type": "object",
      "description": "Represents a manufacturer on the Tradinta platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the manufacturer entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the manufacturing company."
        },
        "description": {
          "type": "string",
          "description": "Description of the manufacturer and their products."
        },
        "email": {
          "type": "string",
          "description": "Email address of the manufacturer.",
          "format": "email"
        },
        "phone": {
          "type": "string",
          "description": "Phone number of the manufacturer."
        },
        "address": {
          "type": "string",
          "description": "Physical address of the manufacturer."
        },
        "shopId": {
          "type": "string",
          "description": "Reference to Shop. (Relationship: Manufacturer 1:1 Shop)"
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "email",
        "phone",
        "address",
        "shopId"
      ]
    },
    "Buyer": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Buyer",
      "type": "object",
      "description": "Represents a buyer on the Tradinta platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the buyer entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the buyer (company or individual)."
        },
        "email": {
          "type": "string",
          "description": "Email address of the buyer.",
          "format": "email"
        },
        "phone": {
          "type": "string",
          "description": "Phone number of the buyer."
        },
        "address": {
          "type": "string",
          "description": "Physical address of the buyer."
        }
      },
      "required": [
        "id",
        "name",
        "email",
        "phone",
        "address"
      ]
    },
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "type": "object",
      "description": "Represents a product listed on the Tradinta marketplace.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the product entity."
        },
        "shopId": {
          "type": "string",
          "description": "Reference to Shop. (Relationship: Shop 1:N Product)"
        },
        "name": {
          "type": "string",
          "description": "Name of the product."
        },
        "description": {
          "type": "string",
          "description": "Description of the product."
        },
        "price": {
          "type": "number",
          "description": "Price of the product."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the product image.",
          "format": "uri"
        },
        "tags": {
          "type": "array",
          "description": "Array of product tags",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "shopId",
        "name",
        "description",
        "price",
        "imageUrl"
      ]
    },
    "Order": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Order",
      "type": "object",
      "description": "Represents an order placed on the Tradinta platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the order entity."
        },
        "buyerId": {
          "type": "string",
          "description": "Reference to Buyer. (Relationship: Buyer 1:N Order)"
        },
        "shopId": {
          "type": "string",
          "description": "Reference to Shop. (Relationship: Shop 1:N Order)"
        },
        "orderDate": {
          "type": "string",
          "description": "Date and time the order was placed.",
          "format": "date-time"
        },
        "totalAmount": {
          "type": "number",
          "description": "Total amount of the order."
        },
        "status": {
          "type": "string",
          "description": "Current status of the order (e.g., pending, processing, shipped, delivered)."
        },
        "orderItemIds": {
          "type": "array",
          "description": "References to OrderItems. (Relationship: Order 1:N OrderItem)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "buyerId",
        "shopId",
        "orderDate",
        "totalAmount",
        "status",
        "orderItemIds"
      ]
    },
    "OrderItem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OrderItem",
      "type": "object",
      "description": "Represents a specific item within an order.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the order item entity."
        },
        "orderId": {
          "type": "string",
          "description": "Reference to Order. (Relationship: Order 1:N OrderItem)"
        },
        "productId": {
          "type": "string",
          "description": "Reference to Product. (Relationship: Product 1:N OrderItem)"
        },
        "quantity": {
          "type": "number",
          "description": "Quantity of the product ordered."
        },
        "unitPrice": {
          "type": "number",
          "description": "Price of a single unit of the product."
        }
      },
      "required": [
        "id",
        "orderId",
        "productId",
        "quantity",
        "unitPrice"
      ]
    },
    "Shop": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Shop",
      "type": "object",
      "description": "Represents a manufacturer's shop on the Tradinta platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the shop entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the shop."
        },
        "description": {
          "type": "string",
          "description": "Description of the shop."
        },
        "manufacturerId": {
          "type": "string",
          "description": "Reference to Manufacturer. (Relationship: Manufacturer 1:1 Shop)"
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "manufacturerId"
      ]
    },
    "Payment": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Payment",
      "type": "object",
      "description": "Represents a payment made through TradPay.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the payment entity."
        },
        "orderId": {
          "type": "string",
          "description": "Reference to Order. (Relationship: Order 1:1 Payment)"
        },
        "paymentDate": {
          "type": "string",
          "description": "Date and time the payment was made.",
          "format": "date-time"
        },
        "amount": {
          "type": "number",
          "description": "Amount of the payment."
        },
        "paymentMethod": {
          "type": "string",
          "description": "Method of payment used (e.g., M-Pesa, card)."
        },
        "transactionId": {
          "type": "string",
          "description": "Transaction ID from the payment gateway."
        },
        "status": {
          "type": "string",
          "description": "Status of the payment (e.g., pending, completed, failed)."
        }
      },
      "required": [
        "id",
        "orderId",
        "paymentDate",
        "amount",
        "paymentMethod",
        "transactionId",
        "status"
      ]
    },
    "MarketingCampaign": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MarketingCampaign",
      "type": "object",
      "description": "Represents a marketing campaign run by a manufacturer.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the marketing campaign entity."
        },
        "shopId": {
          "type": "string",
          "description": "Reference to Shop. (Relationship: Shop 1:N MarketingCampaign)"
        },
        "name": {
          "type": "string",
          "description": "Name of the marketing campaign."
        },
        "startDate": {
          "type": "string",
          "description": "Start date of the campaign.",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "End date of the campaign.",
          "format": "date-time"
        },
        "discountPercentage": {
          "type": "number",
          "description": "Discount percentage offered during the campaign."
        },
        "description": {
          "type": "string",
          "description": "Description of the marketing campaign."
        }
      },
      "required": [
        "id",
        "shopId",
        "name",
        "startDate",
        "endDate",
        "discountPercentage",
        "description"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/manufacturers/{manufacturerId}",
        "definition": {
          "entityName": "Manufacturer",
          "schema": {
            "$ref": "#/backend/entities/Manufacturer"
          },
          "description": "Stores manufacturer profiles. Includes 'shopId' for relationship to Shop.",
          "params": [
            {
              "name": "manufacturerId",
              "description": "The unique identifier for the manufacturer."
            }
          ]
        }
      },
      {
        "path": "/buyers/{buyerId}",
        "definition": {
          "entityName": "Buyer",
          "schema": {
            "$ref": "#/backend/entities/Buyer"
          },
          "description": "Stores buyer profiles.",
          "params": [
            {
              "name": "buyerId",
              "description": "The unique identifier for the buyer."
            }
          ]
        }
      },
      {
        "path": "/shops/{shopId}",
        "definition": {
          "entityName": "Shop",
          "schema": {
            "$ref": "#/backend/entities/Shop"
          },
          "description": "Stores shop profiles. Includes 'manufacturerId' for relationship to Manufacturer.",
          "params": [
            {
              "name": "shopId",
              "description": "The unique identifier for the shop."
            }
          ]
        }
      },
      {
        "path": "/shops/{shopId}/products/{productId}",
        "definition": {
          "entityName": "Product",
          "schema": {
            "$ref": "#/backend/entities/Product"
          },
          "description": "Stores product listings for each shop. Includes denormalized 'shopId' for authorization independence.",
          "params": [
            {
              "name": "shopId",
              "description": "The unique identifier for the shop."
            },
            {
              "name": "productId",
              "description": "The unique identifier for the product."
            }
          ]
        }
      },
      {
        "path": "/orders/{orderId}",
        "definition": {
          "entityName": "Order",
          "schema": {
            "$ref": "#/backend/entities/Order"
          },
          "description": "Stores order details. Includes denormalized 'buyerId' and 'shopId' for authorization independence.",
          "params": [
            {
              "name": "orderId",
              "description": "The unique identifier for the order."
            }
          ]
        }
      },
      {
        "path": "/orders/{orderId}/orderItems/{orderItemId}",
        "definition": {
          "entityName": "OrderItem",
          "schema": {
            "$ref": "#/backend/entities/OrderItem"
          },
          "description": "Stores individual items within an order. Includes 'orderId' to nest under the respective order.",
          "params": [
            {
              "name": "orderId",
              "description": "The unique identifier for the order."
            },
            {
              "name": "orderItemId",
              "description": "The unique identifier for the order item."
            }
          ]
        }
      },
      {
        "path": "/payments/{paymentId}",
        "definition": {
          "entityName": "Payment",
          "schema": {
            "$ref": "#/backend/entities/Payment"
          },
          "description": "Stores payment details. Includes 'orderId' for relationship to Order.",
          "params": [
            {
              "name": "paymentId",
              "description": "The unique identifier for the payment."
            }
          ]
        }
      },
      {
        "path": "/shops/{shopId}/marketingCampaigns/{marketingCampaignId}",
        "definition": {
          "entityName": "MarketingCampaign",
          "schema": {
            "$ref": "#/backend/entities/MarketingCampaign"
          },
          "description": "Stores marketing campaigns for each shop. Includes denormalized 'shopId' for authorization independence.",
          "params": [
            {
              "name": "shopId",
              "description": "The unique identifier for the shop."
            },
            {
              "name": "marketingCampaignId",
              "description": "The unique identifier for the marketing campaign."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support Tradinta's B2B marketplace, focusing on manufacturers, shops, products, buyers, orders, and related entities. The design emphasizes authorization independence via denormalization to avoid `get()` calls in security rules, enhancing security and scalability.\n\n1.  **Authorization Independence:**\n    *   `Manufacturers` and `Shops`: The `shopId` in `Manufacturers` is used to quickly locate a manufacturer's shop. No denormalization is needed at this level as manufacturers are essentially creating their own shops.\n    *   `Products`: The `shopId` field is denormalized into each product to enable secure listing and querying of products within a specific shop. This allows listing products for a shop without needing to query across collections or use `get()` calls in security rules.\n    *   `Orders` and `OrderItems`: The `shopId` and `buyerId` are denormalized into `Orders` to facilitate order listing and access control based on the shop or buyer. The `OrderItem` includes the `orderId`, nesting order items under the respective order.\n    *   `MarketingCampaigns`: The `shopId` is included to allow for listing and management of campaigns specific to a shop.\n2.  **Structural Segregation:**\n    *   Each major entity type (`Manufacturers`, `Buyers`, `Shops`, `Products`, `Orders`, `OrderItems`, `Payments`, `MarketingCampaigns`) has its own top-level collection. This simplifies security rules as each collection has a homogeneous security posture.\n3.  **Access Modeling:**\n    *   Ownership: Shops are owned by manufacturers. Products are owned by shops. Orders are associated with both buyers and shops. This hierarchy is reflected in the data structure.\n    *   Collaborative Data: Membership maps are not used in this design, as the primary access control is based on the relationship between manufacturers, shops, products, and buyers.\n4.  **QAPs (Rules are not Filters):**\n    *   Secure `list` operations are supported by denormalizing the `shopId` and `buyerId` into the respective documents. This allows querying orders or products associated with a shop or buyer without complex rule logic.\n5.  **Invariants:**\n    *   The structure supports the integrity of ownership through explicit `shopId`, `manufacturerId`, and `buyerId` fields.\n\nThis design provides a clear, secure, and scalable foundation for the Tradinta platform."
  }
}